<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- CustomAccessDeniedHandler 빈 설정 -->
	<bean id="customAccessDenied"
		class="com.myrium.security.CustomAccessDeniedHandler"></bean>
	<!-- 커스텀 로그인 성공 핸들러 빈 설정 -->
	<bean id="customLoginSuccess"
		class="com.myrium.security.CustomLoginSuccessHandler"></bean>

	<!-- BCryptPasswordEncoder를 사용하여 비밀번호를 안전하게 해싱하는 데 사용 -->
	<bean id="bcryptPasswordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>

	<!-- org.zerock.security.CustomUserDetailsService 클래스를 사용하여 사용자 정의 사용자 세부 
		정보 서비스를 설정 -->
	<bean id="customUserDetailsService"
		class="com.myrium.security.CustomUserDetailsService"></bean>
	<security:http>

		<security:intercept-url pattern="/sample/all"
			access="permitAll" />
		<security:intercept-url
			pattern="/sample/member" access="hasRole('ROLE_MEMBER')" />
		<security:intercept-url pattern="/sample/admin"
			access="hasRole('ROLE_ADMIN')" />

		<!-- <security:access-denied-handler error-page="/accessError"/> -->

		<!-- 접근 제한 인터페이스를 직접구현 페이지 설정 -->
		<security:access-denied-handler
			ref="customAccessDenied" />

		<!-- 로그인 페이지인 "/customLogin"으로 이동하여 사용자가 인증에 성공하면, Spring Security는 customLoginSuccess 
			빈에 정의된 커스텀 로그인 성공 핸들러를 사용하여 처리한다. -->
		<security:form-login login-page="/customLogin"
			authentication-success-handler-ref="customLoginSuccess" />

		<!-- 로그아웃 관련 설정, 사용자가 로그아웃을 요청할 때 호출되는 URL을 지정, 세션의 무효화 -->
		<security:logout logout-url="/customLogout"
			logout-success-url="/" invalidate-session="true"
			delete-cookies="JSESSIONID" />


		<!-- CSRF 토큰 비활성화 -->
		<security:csrf disabled="true" />
	</security:http>

	<!-- Spring Security 인증 관리자 설정 -->
	<security:authentication-manager>
		<!-- Spring Security 인증 제공자 설정 -->
		<security:authentication-provider
			user-service-ref="customUserDetailsService">

			<!-- bcryptPasswordEncoder를 참조하여 비밀번호를 안전하게 인코딩하는 데 사용한다. -->
			<security:password-encoder
				ref="bcryptPasswordEncoder" />
		</security:authentication-provider>
	</security:authentication-manager>

</beans>
